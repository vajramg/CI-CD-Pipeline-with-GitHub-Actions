name: ci-cd

env:
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  ACR_NAME: ${{ secrets.ACR_NAME }}
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: install dependencies
        run: npm ci

      - name: Run test
        run: npm test

      - name: test run docker build
        run: |
          docker build -t test-build .

          echo "docker build successful"
  deploy:
    name: deploy Application
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # Only deploy from main branch
    needs: test
    defaults:
     run:
      working-directory: ./
    
    steps:
    - name: checkout code
      uses: actions/checkout@v4

    - name: login to azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: build and docker push images
      id: build-image
      run: |
        # Create a unique name for your app with timestamp
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        APP_NAME="mywebapp-$TIMESTAMP"
        echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
        echo "app-name=$APP_NAME" >> $GITHUB_OUTPUT

        # Login to Azure Container Registry
        az acr login --name $ACR_NAME

        # Build Docker image
        docker build -t $APP_NAME .

        # Tag and push image
        IMAGE_TAG="${ACR_NAME}.azurecr.io/${APP_NAME}:latest"
        docker tag $APP_NAME $IMAGE_TAG
        docker push $IMAGE_TAG

        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Deploy to Azure Container Instances
      run: |
        # Clean up any existing container with same name
        az container delete \
          --resource-group $AZURE_RESOURCE_GROUP \
          --name $APP_NAME \
          --yes || true

        # Deploy new container
        az container create \
          --resource-group $AZURE_RESOURCE_GROUP \
          --name $APP_NAME \
          --image ${{ steps.build-image.outputs.image-tag }} \
          --registry-login-server ${ACR_NAME}.azurecr.io \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --dns-name-label $APP_NAME \
          --os-type Linux \
          --ports 3001 \
          --environment-variables NODE_ENV=production \
          --cpu 1 \
          --memory 1.5 \
          --restart-policy Always \
          --location "East US"

    - name: Get Application URL
      run: |
        echo "Waiting for container to be ready..."
        sleep 30
         
        FQDN=$(az container show \
        --resource-group $AZURE_RESOURCE_GROUP \
        --name $APP_NAME \
        --query ipAddress.fqdn \
        --output tsv)
         
        if [ "$FQDN" != "" ] && [ "$FQDN" != "null" ]; then
        echo ""
        echo "üöÄ Deployment successful!"
        echo "üì± Your app is live at: http://$FQDN:3001"     
        echo "üè• Health check: http://$FQDN:3001/health"
        echo "üìä API endpoint: http://$FQDN:3001/api/info"
        echo ""
        echo "üìã Azure Console Links:"
        echo "Resource Group: https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/$AZURE_RESOURCE_GROUP"
        echo "Container Instance: https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/$AZURE_RESOURCE_GROUP/providers/Microsoft.ContainerInstance/containerGroups/$APP_NAME"
        echo ""
        else
        echo "‚ùå Could not get container FQDN. Check Azure portal for details."
        fi
